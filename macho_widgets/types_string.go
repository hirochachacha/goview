// Code generated by "stringer -type=CpuType,CpuSubtypeX86,CpuSubtypeX86_64,CpuSubtypePPC,CpuSubtypeARM,CpuSubtypeARM64,Magic,FileType,SectionType,LoadCommand,ReferenceType -output types_string.go"; DO NOT EDIT.

package macho_widgets

import "fmt"

const (
	_CpuType_name_0 = "CPU_TYPE_VAX"
	_CpuType_name_1 = "CPU_TYPE_MC680x0CPU_TYPE_X86"
	_CpuType_name_2 = "CPU_TYPE_MC98000CPU_TYPE_HPPACPU_TYPE_ARMCPU_TYPE_MC88000CPU_TYPE_SPARCCPU_TYPE_I860"
	_CpuType_name_3 = "CPU_TYPE_POWERPC"
	_CpuType_name_4 = "CPU_TYPE_X86_64"
	_CpuType_name_5 = "CPU_TYPE_ARM64"
	_CpuType_name_6 = "CPU_TYPE_POWERPC64"
)

var (
	_CpuType_index_0 = [...]uint8{0, 12}
	_CpuType_index_1 = [...]uint8{0, 16, 28}
	_CpuType_index_2 = [...]uint8{0, 16, 29, 41, 57, 71, 84}
	_CpuType_index_3 = [...]uint8{0, 16}
	_CpuType_index_4 = [...]uint8{0, 15}
	_CpuType_index_5 = [...]uint8{0, 14}
	_CpuType_index_6 = [...]uint8{0, 18}
)

func (i CpuType) String() string {
	switch {
	case i == 1:
		return _CpuType_name_0
	case 6 <= i && i <= 7:
		i -= 6
		return _CpuType_name_1[_CpuType_index_1[i]:_CpuType_index_1[i+1]]
	case 10 <= i && i <= 15:
		i -= 10
		return _CpuType_name_2[_CpuType_index_2[i]:_CpuType_index_2[i+1]]
	case i == 18:
		return _CpuType_name_3
	case i == 16777223:
		return _CpuType_name_4
	case i == 16777228:
		return _CpuType_name_5
	case i == 16777234:
		return _CpuType_name_6
	default:
		return fmt.Sprintf("CpuType(%d)", i)
	}
}

const _CpuSubtypeX86_name = "CPU_SUBTYPE_X86_ALLCPU_SUBTYPE_X86_ARCH1"

var _CpuSubtypeX86_index = [...]uint8{0, 19, 40}

func (i CpuSubtypeX86) String() string {
	i -= 3
	if i >= CpuSubtypeX86(len(_CpuSubtypeX86_index)-1) {
		return fmt.Sprintf("CpuSubtypeX86(%d)", i+3)
	}
	return _CpuSubtypeX86_name[_CpuSubtypeX86_index[i]:_CpuSubtypeX86_index[i+1]]
}

const (
	_CpuSubtypeX86_64_name_0 = "CPU_SUBTYPE_X86_64_ALL"
	_CpuSubtypeX86_64_name_1 = "CPU_SUBTYPE_X86_64_H"
)

var (
	_CpuSubtypeX86_64_index_0 = [...]uint8{0, 22}
	_CpuSubtypeX86_64_index_1 = [...]uint8{0, 20}
)

func (i CpuSubtypeX86_64) String() string {
	switch {
	case i == 3:
		return _CpuSubtypeX86_64_name_0
	case i == 8:
		return _CpuSubtypeX86_64_name_1
	default:
		return fmt.Sprintf("CpuSubtypeX86_64(%d)", i)
	}
}

const (
	_CpuSubtypePPC_name_0 = "CPU_SUBTYPE_POWERPC_ALLCPU_SUBTYPE_POWERPC_601CPU_SUBTYPE_POWERPC_602CPU_SUBTYPE_POWERPC_603CPU_SUBTYPE_POWERPC_603eCPU_SUBTYPE_POWERPC_603evCPU_SUBTYPE_POWERPC_604CPU_SUBTYPE_POWERPC_604eCPU_SUBTYPE_POWERPC_620CPU_SUBTYPE_POWERPC_750CPU_SUBTYPE_POWERPC_7400CPU_SUBTYPE_POWERPC_7450"
	_CpuSubtypePPC_name_1 = "CPU_SUBTYPE_POWERPC_970"
)

var (
	_CpuSubtypePPC_index_0 = [...]uint16{0, 23, 46, 69, 92, 116, 141, 164, 188, 211, 234, 258, 282}
	_CpuSubtypePPC_index_1 = [...]uint8{0, 23}
)

func (i CpuSubtypePPC) String() string {
	switch {
	case 0 <= i && i <= 11:
		return _CpuSubtypePPC_name_0[_CpuSubtypePPC_index_0[i]:_CpuSubtypePPC_index_0[i+1]]
	case i == 100:
		return _CpuSubtypePPC_name_1
	default:
		return fmt.Sprintf("CpuSubtypePPC(%d)", i)
	}
}

const (
	_CpuSubtypeARM_name_0 = "CPU_SUBTYPE_ARM_ALL"
	_CpuSubtypeARM_name_1 = "CPU_SUBTYPE_ARM_V4TCPU_SUBTYPE_ARM_V6CPU_SUBTYPE_ARM_V5TEJCPU_SUBTYPE_ARM_XSCALECPU_SUBTYPE_ARM_V7CPU_SUBTYPE_ARM_V7FCPU_SUBTYPE_ARM_V7SCPU_SUBTYPE_ARM_V7KCPU_SUBTYPE_ARM_V8CPU_SUBTYPE_ARM_V6MCPU_SUBTYPE_ARM_V7MCPU_SUBTYPE_ARM_V7EM"
)

var (
	_CpuSubtypeARM_index_0 = [...]uint8{0, 19}
	_CpuSubtypeARM_index_1 = [...]uint8{0, 19, 37, 58, 80, 98, 117, 136, 155, 173, 192, 211, 231}
)

func (i CpuSubtypeARM) String() string {
	switch {
	case i == 0:
		return _CpuSubtypeARM_name_0
	case 5 <= i && i <= 16:
		i -= 5
		return _CpuSubtypeARM_name_1[_CpuSubtypeARM_index_1[i]:_CpuSubtypeARM_index_1[i+1]]
	default:
		return fmt.Sprintf("CpuSubtypeARM(%d)", i)
	}
}

const _CpuSubtypeARM64_name = "CPU_SUBTYPE_ARM64_ALLCPU_SUBTYPE_ARM64_V8"

var _CpuSubtypeARM64_index = [...]uint8{0, 21, 41}

func (i CpuSubtypeARM64) String() string {
	if i >= CpuSubtypeARM64(len(_CpuSubtypeARM64_index)-1) {
		return fmt.Sprintf("CpuSubtypeARM64(%d)", i)
	}
	return _CpuSubtypeARM64_name[_CpuSubtypeARM64_index[i]:_CpuSubtypeARM64_index[i+1]]
}

const (
	_Magic_name_0 = "FAT_CIGAM"
	_Magic_name_1 = "FAT_CIGAM_64"
	_Magic_name_2 = "FAT_MAGICFAT_MAGIC_64"
	_Magic_name_3 = "MH_CIGAM"
	_Magic_name_4 = "MH_CIGAM_64"
	_Magic_name_5 = "MH_MAGICMH_MAGIC_64"
)

var (
	_Magic_index_0 = [...]uint8{0, 9}
	_Magic_index_1 = [...]uint8{0, 12}
	_Magic_index_2 = [...]uint8{0, 9, 21}
	_Magic_index_3 = [...]uint8{0, 8}
	_Magic_index_4 = [...]uint8{0, 11}
	_Magic_index_5 = [...]uint8{0, 8, 19}
)

func (i Magic) String() string {
	switch {
	case i == 3199925962:
		return _Magic_name_0
	case i == 3216703178:
		return _Magic_name_1
	case 3405691582 <= i && i <= 3405691583:
		i -= 3405691582
		return _Magic_name_2[_Magic_index_2[i]:_Magic_index_2[i+1]]
	case i == 3472551422:
		return _Magic_name_3
	case i == 3489328638:
		return _Magic_name_4
	case 4277009102 <= i && i <= 4277009103:
		i -= 4277009102
		return _Magic_name_5[_Magic_index_5[i]:_Magic_index_5[i+1]]
	default:
		return fmt.Sprintf("Magic(%d)", i)
	}
}

const _FileType_name = "MH_OBJECTMH_EXECUTEMH_FVMLIBMH_COREMH_PRELOADMH_DYLIBMH_DYLINKERMH_BUNDLEMH_DYLIB_STUBMH_DSYMMH_KEXT_BUNDLE"

var _FileType_index = [...]uint8{0, 9, 19, 28, 35, 45, 53, 64, 73, 86, 93, 107}

func (i FileType) String() string {
	i -= 1
	if i >= FileType(len(_FileType_index)-1) {
		return fmt.Sprintf("FileType(%d)", i+1)
	}
	return _FileType_name[_FileType_index[i]:_FileType_index[i+1]]
}

const _SectionType_name = "S_REGULARS_ZEROFILLS_CSTRING_LITERALSS_4BYTE_LITERALSS_8BYTE_LITERALSS_LITERAL_POINTERSS_NON_LAZY_SYMBOL_POINTERSS_LAZY_SYMBOL_POINTERSS_SYMBOL_STUBSS_MOD_INIT_FUNC_POINTERSS_MOD_TERM_FUNC_POINTERSS_COALESCEDS_GB_ZEROFILLS_INTERPOSINGS_16BYTE_LITERALSS_DTRACE_DOFS_LAZY_DYLIB_SYMBOL_POINTERSS_THREAD_LOCAL_REGULARS_THREAD_LOCAL_ZEROFILLS_THREAD_LOCAL_VARIABLESS_THREAD_LOCAL_VARIABLE_POINTERSS_THREAD_LOCAL_INIT_FUNCTION_POINTERS"

var _SectionType_index = [...]uint16{0, 9, 19, 37, 53, 69, 87, 113, 135, 149, 173, 197, 208, 221, 234, 251, 263, 291, 313, 336, 360, 392, 429}

func (i SectionType) String() string {
	if i >= SectionType(len(_SectionType_index)-1) {
		return fmt.Sprintf("SectionType(%d)", i)
	}
	return _SectionType_name[_SectionType_index[i]:_SectionType_index[i+1]]
}

const _LoadCommand_name = "LC_SEGMENTLC_SYMTABLC_SYMSEGLC_THREADLC_UNIXTHREADLC_LOADFVMLIBLC_IDFVMLIBLC_IDENTLC_FVMFILELC_PREPAGELC_DYSYMTABLC_LOAD_DYLIBLC_ID_DYLIBLC_LOAD_DYLINKERLC_ID_DYLINKERLC_PREBOUND_DYLIBLC_ROUTINESLC_SUB_FRAMEWORKLC_SUB_UMBRELLALC_SUB_CLIENTLC_SUB_LIBRARYLC_TWOLEVEL_HINTSLC_PREBIND_CKSUMLC_SEGMENT_64LC_ROUTINES_64LC_UUIDLC_CODE_SIGNATURELC_SEGMENT_SPLIT_INFOLC_LAZY_LOAD_DYLIBLC_ENCRYPTION_INFOLC_DYLD_INFOLC_VERSION_MIN_MACOSXLC_VERSION_MIN_IPHONEOSLC_FUNCTION_STARTSLC_DYLD_ENVIRONMENTLC_DATA_IN_CODELC_SOURCE_VERSIONLC_DYLIB_CODE_SIGN_DRSLC_ENCRYPTION_INFO_64LC_LINKER_OPTIONLC_LINKER_OPTIMIZATION_HINTLC_VERSION_MIN_TVOSLC_VERSION_MIN_WATCHOSLC_REQ_DYLDLC_LOAD_WEAK_DYLIBLC_RPATHLC_REEXPORT_DYLIBLC_DYLD_INFO_ONLYLC_LOAD_UPWARD_DYLIBLC_MAIN"

var _LoadCommand_map = map[LoadCommand]string{
	1:          _LoadCommand_name[0:10],
	2:          _LoadCommand_name[10:19],
	3:          _LoadCommand_name[19:28],
	4:          _LoadCommand_name[28:37],
	5:          _LoadCommand_name[37:50],
	6:          _LoadCommand_name[50:63],
	7:          _LoadCommand_name[63:74],
	8:          _LoadCommand_name[74:82],
	9:          _LoadCommand_name[82:92],
	10:         _LoadCommand_name[92:102],
	11:         _LoadCommand_name[102:113],
	12:         _LoadCommand_name[113:126],
	13:         _LoadCommand_name[126:137],
	14:         _LoadCommand_name[137:153],
	15:         _LoadCommand_name[153:167],
	16:         _LoadCommand_name[167:184],
	17:         _LoadCommand_name[184:195],
	18:         _LoadCommand_name[195:211],
	19:         _LoadCommand_name[211:226],
	20:         _LoadCommand_name[226:239],
	21:         _LoadCommand_name[239:253],
	22:         _LoadCommand_name[253:270],
	23:         _LoadCommand_name[270:286],
	25:         _LoadCommand_name[286:299],
	26:         _LoadCommand_name[299:313],
	27:         _LoadCommand_name[313:320],
	29:         _LoadCommand_name[320:337],
	30:         _LoadCommand_name[337:358],
	32:         _LoadCommand_name[358:376],
	33:         _LoadCommand_name[376:394],
	34:         _LoadCommand_name[394:406],
	36:         _LoadCommand_name[406:427],
	37:         _LoadCommand_name[427:450],
	38:         _LoadCommand_name[450:468],
	39:         _LoadCommand_name[468:487],
	41:         _LoadCommand_name[487:502],
	42:         _LoadCommand_name[502:519],
	43:         _LoadCommand_name[519:541],
	44:         _LoadCommand_name[541:562],
	45:         _LoadCommand_name[562:578],
	46:         _LoadCommand_name[578:605],
	47:         _LoadCommand_name[605:624],
	48:         _LoadCommand_name[624:646],
	2147483648: _LoadCommand_name[646:657],
	2147483672: _LoadCommand_name[657:675],
	2147483676: _LoadCommand_name[675:683],
	2147483679: _LoadCommand_name[683:700],
	2147483682: _LoadCommand_name[700:717],
	2147483683: _LoadCommand_name[717:737],
	2147483688: _LoadCommand_name[737:744],
}

func (i LoadCommand) String() string {
	if str, ok := _LoadCommand_map[i]; ok {
		return str
	}
	return fmt.Sprintf("LoadCommand(%d)", i)
}

const _ReferenceType_name = "REFERENCE_FLAG_UNDEFINED_NON_LAZYREFERENCE_FLAG_UNDEFINED_LAZYREFERENCE_FLAG_DEFINEDREFERENCE_FLAG_PRIVATE_DEFINEDREFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZYREFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY"

var _ReferenceType_index = [...]uint8{0, 33, 62, 84, 114, 155, 192}

func (i ReferenceType) String() string {
	if i >= ReferenceType(len(_ReferenceType_index)-1) {
		return fmt.Sprintf("ReferenceType(%d)", i)
	}
	return _ReferenceType_name[_ReferenceType_index[i]:_ReferenceType_index[i+1]]
}
